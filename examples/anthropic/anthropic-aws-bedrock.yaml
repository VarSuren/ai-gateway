# Copyright Envoy AI Gateway Authors
# SPDX-License-Identifier: Apache-2.0
# The full text of the Apache license is available in the LICENSE file at
# the root of the repo.

---
# Native Anthropic API â†’ AWS Bedrock InvokeModel Configuration
# This example shows how to route native Anthropic /v1/messages requests to AWS Bedrock
# using the new lightweight InvokeModel translator

# 1. AIGatewayRoute - Defines the native Anthropic API endpoint
apiVersion: aigateway.envoyproxy.io/v1alpha1
kind: AIGatewayRoute
metadata:
  name: anthropic-to-aws-bedrock
  namespace: default
spec:
  # Use Anthropic schema for native /v1/messages API support
  schema:
    name: Anthropic
    version: v1
  rules:
    - matches:
        - headers:
            - name: x-provider
              value: aws
      backendRefs:
        - name: anthropic-aws-bedrock
          weight: 100
    - matches:
        - headers:
            - name: x-ai-eg-model
              value: anthropic.claude-.*  # AWS Bedrock model format
      backendRefs:
        - name: anthropic-aws-bedrock
          weight: 100
    # Default fallback rule
    - backendRefs:
        - name: anthropic-aws-bedrock
          weight: 100

---
# 2. AIServiceBackend - Points to AWS Bedrock with our new translator
apiVersion: aigateway.envoyproxy.io/v1alpha1
kind: AIServiceBackend
metadata:
  name: anthropic-aws-bedrock
  namespace: default
spec:
  # Use AWSBedrock schema to trigger our new InvokeModel translator
  schema:
    name: AWSBedrock
  # Optional: Override model names (useful for mapping)
  # modelNameOverride: "anthropic.claude-3-5-sonnet-20241022-v2:0"
  backendRef:
    group: ""
    kind: Service
    name: aws-bedrock-service
    namespace: default
    port: 443
  # Link to security policy for AWS credentials
  backendSecurityPolicyRef:
    group: aigateway.envoyproxy.io
    kind: BackendSecurityPolicy
    name: aws-bedrock-credentials

---
# 3. BackendSecurityPolicy - AWS credentials configuration
apiVersion: aigateway.envoyproxy.io/v1alpha1
kind: BackendSecurityPolicy
metadata:
  name: aws-bedrock-credentials
  namespace: default
spec:
  type: AWSCredentials
  awsCredentials:
    region: us-east-1  # Change to your preferred region
    # Option A: Use credentials from file/secret
    credentialsFile:
      secretRef:
        name: aws-credentials
        key: credentials
    # Option B: Use OIDC role (uncomment for production)
    # oidcConfig:
    #   roleArn: "arn:aws:iam::123456789012:role/ai-gateway-bedrock-role"
    #   audienceRef:
    #     secretRef:
    #       name: aws-oidc-audience
    #       key: audience

---
# 4. Kubernetes Service - External service pointing to AWS Bedrock
apiVersion: v1
kind: Service
metadata:
  name: aws-bedrock-service
  namespace: default
spec:
  type: ExternalName
  externalName: bedrock-runtime.us-east-1.amazonaws.com  # Change region as needed
  ports:
    - port: 443
      targetPort: 443
      protocol: TCP

---
# 5. Secret - AWS credentials (create this separately for security)
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: default
type: Opaque
stringData:
  # Replace with your actual AWS credentials
  credentials: |
    [default]
    aws_access_key_id = YOUR_ACCESS_KEY_ID
    aws_secret_access_key = YOUR_SECRET_ACCESS_KEY
    # Optional: session token for temporary credentials
    # aws_session_token = YOUR_SESSION_TOKEN

---
# 6. Alternative: OIDC Audience Secret (for production OIDC setup)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: aws-oidc-audience
#   namespace: default
# type: Opaque
# stringData:
#   audience: "https://sts.amazonaws.com"